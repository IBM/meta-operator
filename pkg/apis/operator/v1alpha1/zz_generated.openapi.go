// +build !ignore_autogenerated

//
// Copyright 2020 IBM Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorCatalog":       schema_pkg_apis_operator_v1alpha1_MetaOperatorCatalog(ref),
		"github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorCatalogSpec":   schema_pkg_apis_operator_v1alpha1_MetaOperatorCatalogSpec(ref),
		"github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorCatalogStatus": schema_pkg_apis_operator_v1alpha1_MetaOperatorCatalogStatus(ref),
		"github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorConfig":        schema_pkg_apis_operator_v1alpha1_MetaOperatorConfig(ref),
		"github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorConfigSpec":    schema_pkg_apis_operator_v1alpha1_MetaOperatorConfigSpec(ref),
		"github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorConfigStatus":  schema_pkg_apis_operator_v1alpha1_MetaOperatorConfigStatus(ref),
		"github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorSet":           schema_pkg_apis_operator_v1alpha1_MetaOperatorSet(ref),
		"github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorSetSpec":       schema_pkg_apis_operator_v1alpha1_MetaOperatorSetSpec(ref),
		"github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorSetStatus":     schema_pkg_apis_operator_v1alpha1_MetaOperatorSetStatus(ref),
	}
}

func schema_pkg_apis_operator_v1alpha1_MetaOperatorCatalog(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MetaOperatorCatalog is the Schema for the metaoperatorcatalogs API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorCatalogSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorCatalogStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorCatalogSpec", "github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorCatalogStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_operator_v1alpha1_MetaOperatorCatalogSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MetaOperatorCatalogSpec defines the desired state of MetaOperatorCatalog",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"operators": {
						SchemaProps: spec.SchemaProps{
							Description: "Operators is a list of operator definition",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.Operator"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.Operator"},
	}
}

func schema_pkg_apis_operator_v1alpha1_MetaOperatorCatalogStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MetaOperatorCatalogStatus defines the observed state of MetaOperatorCatalog",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"operatorsStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "OperatorsStatus defines operator running state",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_operator_v1alpha1_MetaOperatorConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MetaOperatorConfig is the Schema for the metaoperatorconfigs API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorConfigSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorConfigStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorConfigSpec", "github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorConfigStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_operator_v1alpha1_MetaOperatorConfigSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MetaOperatorConfigSpec defines the desired state of MetaOperatorConfig",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"services": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html Services is a list of configuration of service",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.ConfigService"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.ConfigService"},
	}
}

func schema_pkg_apis_operator_v1alpha1_MetaOperatorConfigStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MetaOperatorConfigStatus defines the observed state of MetaOperatorConfig",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"serviceStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html ServiceStatus defines all the status of a operator",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.CrStatus"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.CrStatus"},
	}
}

func schema_pkg_apis_operator_v1alpha1_MetaOperatorSet(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MetaOperatorSet is the Schema for the metaoperatorsets API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorSetSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorSetStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorSetSpec", "github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MetaOperatorSetStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_operator_v1alpha1_MetaOperatorSetSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MetaOperatorSetSpec defines the desired state of MetaOperatorSet",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"services": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.SetService"),
									},
								},
							},
						},
					},
				},
				Required: []string{"services"},
			},
		},
		Dependencies: []string{
			"github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.SetService"},
	}
}

func schema_pkg_apis_operator_v1alpha1_MetaOperatorSetStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MetaOperatorSetStatus defines the observed state of MetaOperatorSet",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html Conditions represents the current state of the Set Service",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.Condition"),
									},
								},
							},
						},
					},
					"members": {
						SchemaProps: spec.SchemaProps{
							Description: "Members represnets the current operators of the set",
							Ref:         ref("github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MembersStatus"),
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Phase is the cluster running phase",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"phase"},
			},
		},
		Dependencies: []string{
			"github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.Condition", "github.com/IBM/meta-operator/pkg/apis/operator/v1alpha1.MembersStatus"},
	}
}
